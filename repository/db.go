// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createPaymentStmt, err = db.PrepareContext(ctx, createPayment); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePayment: %w", err)
	}
	if q.createPaymentDestinationStmt, err = db.PrepareContext(ctx, createPaymentDestination); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePaymentDestination: %w", err)
	}
	if q.createTransactionStmt, err = db.PrepareContext(ctx, createTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransaction: %w", err)
	}
	if q.deletePaymentDestinationsStmt, err = db.PrepareContext(ctx, deletePaymentDestinations); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePaymentDestinations: %w", err)
	}
	if q.getPaymentStmt, err = db.PrepareContext(ctx, getPayment); err != nil {
		return nil, fmt.Errorf("error preparing query GetPayment: %w", err)
	}
	if q.getPaymentByExternalIDStmt, err = db.PrepareContext(ctx, getPaymentByExternalID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPaymentByExternalID: %w", err)
	}
	if q.getPaymentDestinationsStmt, err = db.PrepareContext(ctx, getPaymentDestinations); err != nil {
		return nil, fmt.Errorf("error preparing query GetPaymentDestinations: %w", err)
	}
	if q.getTransactionStmt, err = db.PrepareContext(ctx, getTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransaction: %w", err)
	}
	if q.getTransactionByReferenceStmt, err = db.PrepareContext(ctx, getTransactionByReference); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionByReference: %w", err)
	}
	if q.getTransactionsByPaymentIDStmt, err = db.PrepareContext(ctx, getTransactionsByPaymentID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionsByPaymentID: %w", err)
	}
	if q.updatePaymentStatusStmt, err = db.PrepareContext(ctx, updatePaymentStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePaymentStatus: %w", err)
	}
	if q.updateTransactionByReferenceStmt, err = db.PrepareContext(ctx, updateTransactionByReference); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTransactionByReference: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createPaymentStmt != nil {
		if cerr := q.createPaymentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPaymentStmt: %w", cerr)
		}
	}
	if q.createPaymentDestinationStmt != nil {
		if cerr := q.createPaymentDestinationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPaymentDestinationStmt: %w", cerr)
		}
	}
	if q.createTransactionStmt != nil {
		if cerr := q.createTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransactionStmt: %w", cerr)
		}
	}
	if q.deletePaymentDestinationsStmt != nil {
		if cerr := q.deletePaymentDestinationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePaymentDestinationsStmt: %w", cerr)
		}
	}
	if q.getPaymentStmt != nil {
		if cerr := q.getPaymentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaymentStmt: %w", cerr)
		}
	}
	if q.getPaymentByExternalIDStmt != nil {
		if cerr := q.getPaymentByExternalIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaymentByExternalIDStmt: %w", cerr)
		}
	}
	if q.getPaymentDestinationsStmt != nil {
		if cerr := q.getPaymentDestinationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaymentDestinationsStmt: %w", cerr)
		}
	}
	if q.getTransactionStmt != nil {
		if cerr := q.getTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionStmt: %w", cerr)
		}
	}
	if q.getTransactionByReferenceStmt != nil {
		if cerr := q.getTransactionByReferenceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionByReferenceStmt: %w", cerr)
		}
	}
	if q.getTransactionsByPaymentIDStmt != nil {
		if cerr := q.getTransactionsByPaymentIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionsByPaymentIDStmt: %w", cerr)
		}
	}
	if q.updatePaymentStatusStmt != nil {
		if cerr := q.updatePaymentStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePaymentStatusStmt: %w", cerr)
		}
	}
	if q.updateTransactionByReferenceStmt != nil {
		if cerr := q.updateTransactionByReferenceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTransactionByReferenceStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                               DBTX
	tx                               *sql.Tx
	createPaymentStmt                *sql.Stmt
	createPaymentDestinationStmt     *sql.Stmt
	createTransactionStmt            *sql.Stmt
	deletePaymentDestinationsStmt    *sql.Stmt
	getPaymentStmt                   *sql.Stmt
	getPaymentByExternalIDStmt       *sql.Stmt
	getPaymentDestinationsStmt       *sql.Stmt
	getTransactionStmt               *sql.Stmt
	getTransactionByReferenceStmt    *sql.Stmt
	getTransactionsByPaymentIDStmt   *sql.Stmt
	updatePaymentStatusStmt          *sql.Stmt
	updateTransactionByReferenceStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                               tx,
		tx:                               tx,
		createPaymentStmt:                q.createPaymentStmt,
		createPaymentDestinationStmt:     q.createPaymentDestinationStmt,
		createTransactionStmt:            q.createTransactionStmt,
		deletePaymentDestinationsStmt:    q.deletePaymentDestinationsStmt,
		getPaymentStmt:                   q.getPaymentStmt,
		getPaymentByExternalIDStmt:       q.getPaymentByExternalIDStmt,
		getPaymentDestinationsStmt:       q.getPaymentDestinationsStmt,
		getTransactionStmt:               q.getTransactionStmt,
		getTransactionByReferenceStmt:    q.getTransactionByReferenceStmt,
		getTransactionsByPaymentIDStmt:   q.getTransactionsByPaymentIDStmt,
		updatePaymentStatusStmt:          q.updatePaymentStatusStmt,
		updateTransactionByReferenceStmt: q.updateTransactionByReferenceStmt,
	}
}
