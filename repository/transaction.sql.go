// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: transaction.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (payment_id, reference, amount, discount_amount, status) 
VALUES ($1, $2, $3, $4, $5)
RETURNING id, payment_id, reference, amount, discount_amount, tx_signature, status, created_at, updated_at
`

type CreateTransactionParams struct {
	PaymentID      uuid.UUID         `json:"payment_id"`
	Reference      string            `json:"reference"`
	Amount         int64             `json:"amount"`
	DiscountAmount int64             `json:"discount_amount"`
	Status         TransactionStatus `json:"status"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.queryRow(ctx, q.createTransactionStmt, createTransaction,
		arg.PaymentID,
		arg.Reference,
		arg.Amount,
		arg.DiscountAmount,
		arg.Status,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.Reference,
		&i.Amount,
		&i.DiscountAmount,
		&i.TxSignature,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, payment_id, reference, amount, discount_amount, tx_signature, status, created_at, updated_at FROM transactions WHERE id = $1
`

func (q *Queries) GetTransaction(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.queryRow(ctx, q.getTransactionStmt, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.Reference,
		&i.Amount,
		&i.DiscountAmount,
		&i.TxSignature,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionByReference = `-- name: GetTransactionByReference :one
SELECT id, payment_id, reference, amount, discount_amount, tx_signature, status, created_at, updated_at FROM transactions WHERE reference = $1
`

func (q *Queries) GetTransactionByReference(ctx context.Context, reference string) (Transaction, error) {
	row := q.queryRow(ctx, q.getTransactionByReferenceStmt, getTransactionByReference, reference)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.Reference,
		&i.Amount,
		&i.DiscountAmount,
		&i.TxSignature,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionsByPaymentID = `-- name: GetTransactionsByPaymentID :many
SELECT id, payment_id, reference, amount, discount_amount, tx_signature, status, created_at, updated_at FROM transactions WHERE payment_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetTransactionsByPaymentID(ctx context.Context, paymentID uuid.UUID) ([]Transaction, error) {
	rows, err := q.query(ctx, q.getTransactionsByPaymentIDStmt, getTransactionsByPaymentID, paymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.PaymentID,
			&i.Reference,
			&i.Amount,
			&i.DiscountAmount,
			&i.TxSignature,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransactionByReference = `-- name: UpdateTransactionByReference :one
UPDATE transactions SET tx_signature = $1, status = $2 WHERE reference = $3 RETURNING id, payment_id, reference, amount, discount_amount, tx_signature, status, created_at, updated_at
`

type UpdateTransactionByReferenceParams struct {
	TxSignature sql.NullString    `json:"tx_signature"`
	Status      TransactionStatus `json:"status"`
	Reference   string            `json:"reference"`
}

func (q *Queries) UpdateTransactionByReference(ctx context.Context, arg UpdateTransactionByReferenceParams) (Transaction, error) {
	row := q.queryRow(ctx, q.updateTransactionByReferenceStmt, updateTransactionByReference, arg.TxSignature, arg.Status, arg.Reference)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.Reference,
		&i.Amount,
		&i.DiscountAmount,
		&i.TxSignature,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
